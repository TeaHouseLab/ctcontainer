#!/usr/bin/env fish

function checkdependence
set 34ylli8_deps_ok 1
for 34ylli8_deps in $argv
    if command -q -v $34ylli8_deps
    else
        set 34ylli8_deps_ok 0
        if test -z "$34ylli8_dep_lost"
            set 34ylli8_deps_lost "$34ylli8_deps $34ylli8_deps_lost"
        else
            set 34ylli8_deps_lost "$34ylli8_deps"
        end
    end
end
if test "$34ylli8_deps_ok" -eq 0
    set_color red
    echo "$prefix [error] "Please install "$34ylli8_deps_lost"to run this program""
    set_color normal
    exit
end
end
function checknetwork
  if curl -s -L $argv[1] | grep -q $argv[2]
  else
    set_color red
    echo "$prefix [error] [checknetwork] check failed - check your network connection"
    set_color normal
  end
end
function dir_exist
  if test -d $argv[1]
  else
    set_color red
    echo "$prefix [error] [checkdir] check failed - dir $argv[1] doesn't exist,going to makr one"
    set_color normal
    mkdir $argv[1]
  end
end
function list_menu
ls $argv | sed '\~//~d'
end

function help_echo
 echo '
(./)app [init, run, load, import, purge, list] argvs

    init: Pull a rootfs from cloud repo
        Example: ctcontainer init debian-stable (-f)
        Argvs [-f/--forcename, -n/--name]
        -f/--forcename: Create your container without prefix
        -n/--name: Create your container with a custom name
        (Note: If a container already exist, it will directly overwrite it if you specific a name or create it without prefix)

    run: Run a program in a container
        Example: ctcontainer run archlinux bash

    load: Run a program in a container in a rootfs out of ctcontainer root

    import: Import a container into ctcontainer root
        Example: ctcontainer import /home/thl/tmp/fedora35 (-f)
        Argvs [-f/--forcename, -n/--name=]
        -f/--forcename: Create your container without prefix
        -n/--name=: Create your container with a custom name
        (Note: If a container already exist, it will directly overwrite it if you specific a name or create it without prefix)

    purge: Purge a container from ctcontainer root

    list: List installed/available container
        Example1: ctcontainer list installed (list installed container)
        Example2: ctcontainer list installed size (list installed container, with their size sumup)
        Example3: ctcontainer list available (list available rootfs on cloud repo)
    
    service: Manage a systemd service for nspawn container
        Argvs: [create, remove, enable, disable] argvs
        Example1: ctcontainer create/remove alpinelinux centos9 (create/remove service for alpinelinux and centos9)
        Example2: ctcontainer enable/disable alpinelinux centos9 (start/stop and enable/disable service for alpinelinux and centos9)

Argvs
(./app) [-r/--ctroot=, -s/--ctshare=, -l/--ctlog_level=, -u/--ctauto_umount=, -p/--ctsafety_level=, -b/--ctbackend=, -x/--x11=, -e/--source] commands

    -r/--ctroot=: Force set a ctcontainer root directory

    -s/--ctshare=: Force set a ctcontainer shared directory path

    -l/--ctlog_level=: Force set the log_level, available{info, debug}

    -u/--ctauto_umount=: Force set a value of auto umount, available{0, 1}

    -p/--ctsafety_level=: Force set a safety level, available{-1, 0, 1, 2}

    -b/--ctbackend=: Force set a ctcontainer backend, available{chroot, nspawn}

    -x/--x11: Force set a x11 backend for ctcontainer, available{xhost, xephyr}, other option will make ctcontainer to skip setup x11 backend

    -e/--source: Force set a remote lxc images repo

    Note: These arg must be put before any commands
'
end

function install
set installname $argv[1]
  set dir (pwd)
  set filename (status --current-filename)
  chmod +x $dir/$filename
  sudo cp $dir/$filename /usr/bin/$installname
  set_color green
  echo "$prefix Installed"
  set_color normal
end
function uninstall
set installname $argv[1]
  sudo rm /usr/bin/$installname
  set_color green
  echo "$prefix Removed"
  set_color normal
end

function logger-warn
  set_color magenta
  echo "$prefix ! $argv[1..-1]"
  set_color normal
end
function logger-error
  set_color red
  echo "$prefix x $argv[1..-1]"
  set_color normal
end
function logger-info-start
  set_color normal
  echo "$prefix + $argv[1..-1]"
  set_color normal
end
function logger-info-end
  set_color normal
  echo "$prefix - $argv[1..-1]"
  set_color normal
end
function logger-debug
  set_color yellow
  echo "$prefix ? $argv[1..-1]"
  set_color normal
end
function logger-success
  set_color green
  echo "$prefix âˆš $argv[1..-1]"
  set_color normal
end
function logger -d "a lib to print msg quickly"
switch $argv[1]
case 0
  logger-info-start $argv[2..-1]
case 1
  logger-info-end $argv[2..-1]
case 2
  logger-success $argv[2..-1]
case 3
  logger-debug $argv[2..-1]
case 4
  logger-warn $argv[2..-1]
case 5
  logger-error $argv[2..-1]
end
end

function configure
    sed -n "/$argv[1]=/"p "$argv[2]" | sed "s/$argv[1]=//g"
end
function purge
    for container in $argv[1..-1]
        container_tester $container
        cd $ctcontainer_root
        if sudo rm -rf -- $container
            logger 2 "$container has been purged"
        else
            logger 5 "Something went wrong while purging $container"
        end
    end
end

function import
    set container $argv[1]
    if [ "$container" = "" ]
        logger 5 "Nothing to import,abort"
        exit
    end
    set containername (basename $container)
    if [ "$ctcontainer_log_level" = debug ]
        logger 3 "set rootfs.import.ctcontainer -> $container"
        logger 3 "set containername.import.ctcontainer -> $containername"
    end
    logger 0 "Importing..."
    cd $ctcontainer_root
    argparse -i -n $prefix f/forcename 'n/name=' -- $argv
    if set -q _flag_forcename
        logger 4 "Using forcename mode,container might be killed(coverd)"
    else
        while test -d $containername$initraid
            logger 4 "The container name has existed,generating a new one"
            set initraid (random 1000 1 9999)
            set containername $containername$initraid
        end
    end
    if set -q _flag_name
        logger 4 "Using custom name mode,container might be killed(coverd)"
        if test "$_flag_name" = ""
            logger 5 "You can`t create a container without a name, abort"
            exit
        else
            set containername $_flag_name
        end
    end
    if [ "$ctcontainer_log_level" = debug ]
        logger 3 "set containername.import.ctcontainer -> $containername"
    end
    if test -d $containername
        logger 3 "A container has already exist with this name, purge and overwrite it?[y/n]"
        read -n1 -P "$prefix >>> " _purge_
        switch $_purge_
            case n N
                logger 1 Abort
                exit
            case y Y '*'
                sudo rm -rf $ctcontainer_root/$containername
        end
    end
    if sudo cp -r $container $containername
        if [ "$ctcontainer_log_level" = debug ]
            logger 3 "Outpost deploy has started..."
            sudo sh -c "echo 'safety:x:1000:1000:safety,,,:/home/safety:/bin/sh' >> $ctcontainer_root/$containername/etc/passwd
                echo 'safety:x:1000:' >> $ctcontainer_root/$containername/etc/group
                echo 'safety:!:0:0:99999:7:::' >> $ctcontainer_root/$containername/etc/shadow
                mkdir -p $ctcontainer_root/$containername/home/safety
                rm -f $ctcontainer_root/$containername/etc/hostname
                echo $containername > $ctcontainer_root/$containername/etc/hostname
                echo 127.0.0.1  $containername >> $ctcontainer_root/$containername/etc/hosts
                cp -f --remove-destination /etc/resolv.conf $ctcontainer_root/$containername/etc/resolv.conf"
        else
            sudo sh -c "echo 'safety:x:1000:1000:safety,,,:/home/safety:/bin/sh' >> $ctcontainer_root/$containername/etc/passwd
                echo 'safety:x:1000:' >> $ctcontainer_root/$containername/etc/group
                echo 'safety:!:0:0:99999:7:::' >> $ctcontainer_root/$containername/etc/shadow
                mkdir -p $ctcontainer_root/$containername/home/safety
                rm -f $ctcontainer_root/$containername/etc/hostname
                echo $containername > $ctcontainer_root/$containername/etc/hostname
                echo 127.0.0.1  $containername >> $ctcontainer_root/$containername/etc/hosts
                cp -f --remove-destination /etc/resolv.conf $ctcontainer_root/$containername/etc/resolv.conf" &>/dev/null
        end
        set ctcontainer_safety_level 0
        set ctcontainer_auto_umount 1
        if [ "$ctcontainer_log_level" = debug ]
            logger 3 "Inner deploy has started..."
            chroot_run $containername /bin/sh -c '/bin/chown -R safety:safety /home/safety
                /bin/chmod -R 755 /home/safety & echo "safety    ALL=(ALL:ALL) ALL" >> /etc/sudoers
                echo "0d7882da60cc3838fabc4efc62908206" >/etc/machine-id
                (crontab -l 2>/dev/null; echo @reboot ip link set host0 name eth0) | crontab -'
        else
            chroot_run $containername /bin/sh -c '/bin/chown -R safety:safety /home/safety
                /bin/chmod -R 755 /home/safety & echo "safety    ALL=(ALL:ALL) ALL" >> /etc/sudoers
                echo "0d7882da60cc3838fabc4efc62908206" >/etc/machine-id
                (crontab -l 2>/dev/null; echo @reboot ip link set host0 name eth0) | crontab -' &>/dev/null
        end
    else
        logger 5 "Cannot copy the rootfs to root.ctcontainer,checkout the debug info and try to import again"
    end
end

function ctconfig_init
    set_color red
    echo "$prefix Detected First Launching,We need your password to create the config file"
    set_color normal
    echo "ctcontainer_root=/opt/ctcontainer 
ctcontainer_share=$HOME/ctcontainer_share 
log_level=info 
backend=chroot 
safety_level=-1 
auto_umount=1
x11=xhost
source=https://us.lxd.images.canonical.com" >/etc/centerlinux/conf.d/ctcontainer.conf
end

function service
    set containers $argv[2..-1]
    switch $argv[1]
        case remove
            for container in $containers
                container_tester $container
                if sudo rm /etc/systemd/system/ctcontainer-$container.service
                    logger 2 "Systemd service for $container has been removed"
                else
                    logger 5 "Something went wrong while removing systemd service for $container"
                end
            end
        case create
            for container in $containers
                container_tester $container
                if test -e /etc/systemd/system/ctcontainer-$container.service
                    logger 3 "A service file had already been created for this container,remove it?[y/n]"
                    read -n1 -P "$prefix >>> " _remove_
                    switch $_remove_
                        case n N
                            logger 1 Abort
                            exit
                        case y Y '*'
                            sudo rm /etc/systemd/system/ctcontainer-$container.service
                    end
                end
                echo "[Unit]
Description=ctcontainer-nspawn-$container
After=network.target
StartLimitIntervalSec=15
[Service]
User=root
ExecStart=ctcontainer -b nspawn -p 0 run $container whatever
SyslogIdentifier=ctcontainer-nspawn-$container
Restart=on-failure
RestartSec=5
[Install]
WantedBy=multi-user.target" | sudo tee /etc/systemd/system/ctcontainer-$container.service &>/dev/null
                logger 2 "Systemd service for $container has been created at /etc/systemd/system/ctcontainer-$container.service"
            end
        case enable
            for container in $containers
                container_tester $container
                if sudo systemctl enable ctcontainer-$container; and sudo systemctl start ctcontainer-$container
                    logger 2 "Container $container is active and enabled on system startup"
                else
                    logger 5 "Something went wrong while enabling container $container"
                end
            end
        case disable
            for container in $containers
                container_tester $container
                if sudo systemctl disable ctcontainer-$container; and sudo systemctl stop ctcontainer-$container
                    logger 2 "Container $container stopped and disabled on system startup"
                else
                    logger 5 "Something went wrong while disabling container $container"
                end
            end
        case '*'
            logger 5 "No option is provided, abort"
            exit 1
    end
end

function container_tester
    set container $argv[1]
    if [ "$container" = "" ]
        logger 5 "Nothing selected , abort"
        exit 1
    else
        if test -d $ctcontainer_root/$container; and test -r $ctcontainer_root/$container
        else
            logger 5 "Container $container does not exist,abort,check your container list,or probably there's a incorrect option is provided"
            exit 1
        end
    end
end

function read_lxc
    if test -z "$ctcontainer_source"
        logger 5 "No remote repo is configured, abort"
        logger 5 "Please configure source= in /etc/centerlinux/conf.d/ctcontainer.conf"
        exit
    end
    set image (curl -sL $ctcontainer_source/streams/v1/images.json | jq -r '.products')
    switch $argv[1]
        case all_images
            echo $image | jq -r 'keys | .[]'
        case get_path
            set container $argv[2]
            set latest (echo $image | jq -r ".[\"$container\"].versions|keys|.[]" | tail -n1)
            echo $image | jq -r ".[\"$container\"].versions|.[\"$latest\"].items |.[\"root.tar.xz\"].path"
    end
end

function list
    switch $argv[1]
        case installed
            switch $argv[2]
                case size
                    logger 4 "Installed"
                    for container in (list_menu $ctcontainer_root)
                        printf "$container "
                        sudo du -sh $ctcontainer_root/$container | awk '{ print $1 }'
                    end
                case '*'
                    logger 4 "Installed"
                    list_menu $ctcontainer_root
            end
        case available
            logger 4 "Available"
            read_lxc all_images
        case '*'
            logger 4 "Available"
            read_lxc all_images
            logger 4 "Installed"
            list_menu $ctcontainer_root
    end
end

function init
    set container $argv[1]
    set containername $container
    if [ "$ctcontainer_log_level" = debug ]
        logger 3 "set container.init.ctcontainer -> $container"
        logger 3 "set containername.init.ctcontainer -> $ctcontainername"
    end
    if [ "$containername" = "" ]
        logger 5 "Nothing to init,abort"
        exit
    end
    logger 0 "Deploying..."
    cd $ctcontainer_root
    argparse -i -n $prefix f/forcename 'n/name=' -- $argv
    if set -q _flag_forcename
        logger 4 "Using forcename mode,container might be killed(coverd)"
    else
        while test -d $containername$initraid
            logger 4 "The container name has existed,generating a new one"
            set initraid (random 1000 1 9999)
            set containername $containername$initraid
        end
    end
    if set -q _flag_name
        logger 4 "Using custom name mode,container might be killed(coverd)"
        if test "$_flag_name" = ""
            logger 5 "You can't create a container without a name, abort"
            exit
        else
            set containername $_flag_name
        end
    end
    set remote_path (read_lxc get_path $container)
    if test -d $containername
        logger 3 "A container has already exist with this name, purge and overwrite it?[y/n]"
        read -n1 -P "$prefix >>> " _purge_
        switch $_purge_
            case y Y
                purge $containername
            case n N '*'
                logger 1 Abort
                exit
        end
    end
    if [ "$ctcontainer_log_level" = debug ]
        logger 3 "set containername.import.ctcontainer -> $ctcontainername"
        logger 3 "curl.init.ctcontainer ==> Grabbing $ctcontainer_source/$remote_path"
    end
    if sudo -E curl --progress-bar -L -o $container.tar.gz $ctcontainer_source/$remote_path
        if file $container.tar.gz | grep -q compressed
            logger 2 "$container Package downloaded"
        else
            logger 5 "This is not a tarball,abort"
            sudo rm -- $container.tar.gz
            exit
        end
        sudo mkdir -p $containername
        sudo mv $container.tar.gz $containername
        cd $containername
        if sudo tar --force-local -xf $container.tar.gz
            if [ "$ctcontainer_log_level" = debug ]
                logger 3 "Outpost deploy has started..."
                sudo sh -c "echo 'safety:x:1000:1000:safety,,,:/home/safety:/bin/sh' >> $ctcontainer_root/$containername/etc/passwd
                    echo 'safety:x:1000:' >> $ctcontainer_root/$containername/etc/group
                    echo 'safety:!:0:0:99999:7:::' >> $ctcontainer_root/$containername/etc/shadow
                    mkdir -p $ctcontainer_root/$containername/home/safety
                    rm -f $ctcontainer_root/$containername/etc/hostname
                    echo $containername > $ctcontainer_root/$containername/etc/hostname
                    echo 127.0.0.1  $containername >> $ctcontainer_root/$containername/etc/hosts
                    cp -f --remove-destination /etc/resolv.conf $ctcontainer_root/$containername/etc/resolv.conf"
            else
                sudo sh -c "echo 'safety:x:1000:1000:safety,,,:/home/safety:/bin/sh' >> $ctcontainer_root/$containername/etc/passwd
                    echo 'safety:x:1000:' >> $ctcontainer_root/$containername/etc/group
                    echo 'safety:!:0:0:99999:7:::' >> $ctcontainer_root/$containername/etc/shadow
                    mkdir -p $ctcontainer_root/$containername/home/safety
                    rm -f $ctcontainer_root/$containername/etc/hostname
                    echo $containername > $ctcontainer_root/$containername/etc/hostname
                    echo 127.0.0.1  $containername >> $ctcontainer_root/$containername/etc/hosts
                    cp -f --remove-destination /etc/resolv.conf $ctcontainer_root/$containername/etc/resolv.conf" &>/dev/null
            end
            set ctcontainer_safety_level 0
            set ctcontainer_auto_umount 1
            if [ "$ctcontainer_log_level" = debug ]
                logger 3 "Inner deploy has started..."
                chroot_run $containername /bin/sh -c '/bin/chown -R safety:safety /home/safety
                    /bin/chmod -R 755 /home/safety & echo "safety    ALL=(ALL:ALL) ALL" >> /etc/sudoers
                    echo "0d7882da60cc3838fabc4efc62908206" > /etc/machine-id
                    (crontab -l 2>/dev/null; echo @reboot ip link set host0 name eth0) | crontab -'
            else
                chroot_run $containername /bin/sh -c '/bin/chown -R safety:safety /home/safety
                    /bin/chmod -R 755 /home/safety & echo "safety    ALL=(ALL:ALL) ALL" >> /etc/sudoers
                    echo "0d7882da60cc3838fabc4efc62908206" > /etc/machine-id
                    (crontab -l 2>/dev/null; echo @reboot ip link set host0 name eth0) | crontab -' &>/dev/null
            end
            sudo rm $ctcontainer_root/$containername/$container.tar.gz
            logger 2 "$container deployed in $ctcontainer_root/$containername, remember to change the password of root and safety account(run with -p0 and -bchroot flag to enter chroot with root account and zero restriction)"
            logger 4 "Use 'ctcontainer run $containername xxx' to launch this container"
        else
            sudo rm -rf $ctcontainer_root/$containername
            logger 5 "Check your network and the name of container(use ctcontainer list to see all available distros)"
        end
    else
        sudo rm -- $container.tar.gz
        logger 5 "Failed to download rootfs,check your network connective"
    end
end

function setup_dir_nspawn
    if test -d $ctcontainer_root/$container/var/run/dbus
    else
        sudo mkdir -p $ctcontainer_root/$container/var/run/dbus
    end
    if test -d $ctcontainer_root/$container$XDG_RUNTIME_DIR
    else
        sudo mkdir -p $ctcontainer_root/$container$XDG_RUNTIME_DIR
    end
    if test -d $ctcontainer_root/$container/tmp/.X11-unix
    else
        sudo mkdir -p $ctcontainer_root/$container/tmp/.X11-unix
    end
    if test -d $ctcontainer_share
    else
        mkdir -p $ctcontainer_share
    end
    if test -d $ctcontainer_root/$container/ctcontainer_share
    else
        sudo mkdir -p $ctcontainer_root/$container/ctcontainer_share
    end
end

function nspawn_run
    set -lx container $argv[1]
    if [ "$ctload" = true ]
        cd (dirname $argv[1])
        set ctcontainer_root .
        set container (basename $argv[1])
    end
    if test -d $ctcontainer_root/$container
    else
        logger 5 "No such container exist,abort,check your containerlist,or probably there's a incorrect option is providered"
        exit
    end
    if [ "$argv[2..-1]" = "" ]
        if test "$ctcontainer_safety_level" = 0
        else
            logger 5 "Nothing to run,abort"
            exit
        end
    end
    setup_dir_nspawn
    setup_user_xorg
    cd $ctcontainer_root
    switch $ctcontainer_safety_level
        case -1
            sudo systemd-nspawn --resolv-conf=off --bind=$ctcontainer_share:/ctcontainer_share -q -u safety -D $container env XDG_RUNTIME_DIR=$XDG_RUNTIME_DIR DISPLAY=:0 HOME=/home/safety USER=safety $argv[2..-1]
        case 0
            sudo systemd-nspawn --resolv-conf=off -b -n -q -D $container
        case 1
            sudo systemd-nspawn --resolv-conf=off -q -D $container env DISPLAY=:0 $argv[2..-1]
        case 2
            sudo systemd-nspawn --resolv-conf=off -q -u safety -D $container env DISPLAY=:0 HOME=/home/safety USER=safety $argv[2..-1]
        case h '*'
            logger 5 "can't understand what is $ctcontainer_safety_level,abort"
            exit
    end
end

function chroot_run
    set -lx container $argv[1]
    set -lx chroot_mount_point
    if [ "$ctload" = "true" ]
        cd (dirname $argv[1])
        set ctcontainer_root .
        set container (basename $argv[1])
    end
    if test -d $ctcontainer_root/$container
    else
        logger 5 "Container $container does not exist,abort,check your containerlist,or probably there's a incorrect option is provided"
        exit
    end
    if [ "$argv[2..-1]" = "" ]
        logger 5 "Nothing to run,abort"
        exit
    end
    cd $ctcontainer_root
    essential_mount
    switch $ctcontainer_safety_level
        case -1
            sudo unshare -impuCTf chroot --userspec safety:safety $container env XDG_RUNTIME_DIR=$XDG_RUNTIME_DIR DISPLAY=:0 HOME=/home/safety USER=safety $argv[2..-1]
        case 0
            sudo unshare -impuCTf chroot $container env DISPLAY=:0 XDG_RUNTIME_DIR=$XDG_RUNTIME_DIR $argv[2..-1]
        case 1
            sudo unshare -impuCTf chroot $container env DISPLAY=:0 $argv[2..-1]
        case 2
            sudo unshare -impuCTf chroot --userspec safety:safety $container env DISPLAY=:0 HOME=/home/safety USER=safety $argv[2..-1]
        case h '*'
            logger 5 "Can't understand what is safety_level.ctcontainer{$ctcontainer_safety_level},abort"
            exit
    end
    essential_umount
end

function setup_user_share
    if test -d $ctcontainer_share
    else
        mkdir -p $ctcontainer_share
    end
    if test -d $ctcontainer_root/$container/ctcontainer_share
    else
        sudo mkdir -p $ctcontainer_root/$container/ctcontainer_share
    end
    if grep -qs "$ctcontainer_root/$container/ctcontainer_share" /proc/mounts
    else
    sudo mount -o bind $ctcontainer_share $ctcontainer_root/$container/ctcontainer_share
    end
end

function essential_mount
    logger 0 "Launching $container from $ctcontainer_root"
    function chroot_mount_ro
        for chroot_mount_target in $chroot_mount_point
            if [ "$ctcontainer_log_level" = debug ]
                logger 3 "Mounting $chroot_mount_target $ctcontainer_root/$container$chroot_mount_target"
            end
            if grep -qs "$ctcontainer_root/$container$chroot_mount_target" /proc/mounts
            else
                sudo mount -o bind,ro $chroot_mount_target $ctcontainer_root/$container$chroot_mount_target
            end
        end
    end
    function chroot_mount_rw
        for chroot_mount_target in $chroot_mount_point
            if [ "$ctcontainer_log_level" = debug ]
                logger 3 "Mounting $chroot_mount_target $ctcontainer_root/$container$chroot_mount_target"
            end
            if grep -qs "$ctcontainer_root/$container$chroot_mount_target" /proc/mounts
            else
                sudo mount -o bind,rw $chroot_mount_target $ctcontainer_root/$container$chroot_mount_target
            end
        end
    end
    setup_user_share
    switch $ctcontainer_safety_level
        case 0 -1
            if [ "$ctcontainer_log_level" = debug ]
                logger 3 'mount in read-write filesystem'
            end
            setup_user_xorg
            setup_dbus
            set chroot_mount_point /dev /dev/pts /proc /sys
            if [ "$ctcontainer_log_level" = debug ]
                logger 3 "set mount_point.essential_mount.run_chroot -> $chroot_mount_point"
            end
            chroot_mount_rw
        case 1 2
            if [ "$ctcontainer_log_level" = debug ]
                logger 3 'mount in read-only filesystem'
            end
            setup_user_xorg
            set chroot_mount_point /dev /dev/pts /proc /sys
            if [ "$ctcontainer_log_level" = debug ]
                logger 3 "set mount_point.essential_mount.run_chroot -> $chroot_mount_point"
            end
            chroot_mount_ro
        case h '*'
            logger 5 "can't understand what is $ctcontainer_safety_level,abort"
            exit
    end
end

function setup_user_xorg
    switch $ctcontainer_x11
        case xhost
            if command -q -v xhost
                if xhost +local: &>/dev/null
                else
                    if [ "$ctcontainer_log_level" = debug ]
                        logger 3 "Xhost cannot be setup,skip"
                    end
                end
            else
                if [ "$ctcontainer_log_level" = debug ]
                    logger 3 "Xhost was not found,xorg in container couldn't be set up"
                end
            end
        case xephyr
            if command -q -v Xephyr
                Xephyr -br -ac -noreset -title "ctcontainer@$container" :1 &>/dev/null &
            else
                if [ "$ctcontainer_log_level" = debug ]
                    logger 3 "Xephyr was not found,xorg in container couldn't be set up"
                end
            end
        case '*'
            logger 4 "Skip setup for x11"
    end
end

function essential_umount
    function chroot_umount
        set chroot_mount_point /dev/pts /dev /proc /sys /var/run/dbus /tmp/run/dbus /run/dbus "$XDG_RUNTIME_DIR" /ctcontainer_share
        for chroot_umount_target in $chroot_mount_point
            if grep -qs "$ctcontainer_root/$container$chroot_umount_target" /proc/mounts
                sudo umount -l $ctcontainer_root/$container$chroot_umount_target
            end
        end
        if grep -qs /dev/pts /proc/mounts
        else
            sudo mount devpts /dev/pts -t devpts
        end
        logger 1 Umountd
    end
    switch $ctcontainer_auto_umount
        case 0
            logger 1 "Exited without umount"
        case 1 '*'
            chroot_umount
    end
end

function setup_dbus
    if test -d $ctcontainer_root/$container/var/run/dbus
    else
        sudo mkdir -p $ctcontainer_root/$container/var/run/dbus
    end
    if test -d $ctcontainer_root/$container$XDG_RUNTIME_DIR
    else
        sudo mkdir -p $ctcontainer_root/$container$XDG_RUNTIME_DIR
    end
    if grep -qs "$ctcontainer_root/$container/var/run/dbus" /proc/mounts
    else
        sudo mount -o bind /var/run/dbus $ctcontainer_root/$container/var/run/dbus
    end
    if grep -qs "$ctcontainer_root/$container$XDG_RUNTIME_DIR" /proc/mounts
    else
        sudo mount -o bind $XDG_RUNTIME_DIR $ctcontainer_root/$container$XDG_RUNTIME_DIR
    end
end

echo Build_Time_UTC=2022-07-15_10:43:46
set -lx prefix [ctcontainer]
set -lx ctcontainer_root /opt/ctcontainer
set -lx ctcontainer_share $HOME/ctcontainer_share
set -lx ctcontainer_log_level info
set -lx ctcontainer_backend chroot
set -lx ctcontainer_safety_level 1
set -lx ctcontainer_auto_umount 1
set -lx ctcontainer_x11 xhost
set -lx ctcontainer_source "https://us.lxd.images.canonical.com"
if test -d /etc/centerlinux/conf.d/
else
    sudo mkdir -p /etc/centerlinux/conf.d/
end
if test -e /etc/centerlinux/conf.d/ctcontainer.conf
    set ctcontainer_root (configure ctcontainer_root /etc/centerlinux/conf.d/ctcontainer.conf)
    set ctcontainer_share (configure ctcontainer_share /etc/centerlinux/conf.d/ctcontainer.conf)
    set ctcontainer_log_level (configure log_level /etc/centerlinux/conf.d/ctcontainer.conf)
    set ctcontainer_backend (configure backend /etc/centerlinux/conf.d/ctcontainer.conf)
    set ctcontainer_safety_level (configure safety_level /etc/centerlinux/conf.d/ctcontainer.conf)
    set ctcontainer_auto_umount (configure auto_umount /etc/centerlinux/conf.d/ctcontainer.conf)
    set ctcontainer_x11 (configure x11 /etc/centerlinux/conf.d/ctcontainer.conf)
    set ctcontainer_source (configure source /etc/centerlinux/conf.d/ctcontainer.conf)
else
    ctconfig_init
end
if test -d $ctcontainer_root
else
    logger 4 "root.ctcontainer not found,try to create it under root"
    sudo mkdir -p $ctcontainer_root
end
argparse -i -n $prefix 'r/ctroot=' 's/ctshare=' 'l/ctlog_level=' 'u/ctauto_umount=' 'p/ctsafety_level=' 'b/ctbackend=' 'x/x11=' 'e/source=' -- $argv
if set -q _flag_ctroot
    set ctcontainer_root $_flag_ctroot
end
if set -q _flag_ctshare
    set ctcontainer_share $_flag_ctshare
end
if set -q _flag_ctlog_level
    set ctcontainer_log_level $_flag_ctlog_level
end
if set -q _flag_ctauto_umount
    set ctcontainer_auto_umount $_flag_ctauto_umount
end
if set -q _flag_ctsafety_level
    set ctcontainer_safety_level $_flag_ctsafety_level
end
if set -q _flag_ctbackend
    set ctcontainer_backend $_flag_ctbackend
end
if set -q _flag_x11
    set ctcontainer_x11 $_flag_x11
end
if set -q _flag_source
    set ctcontainer_source $_flag_source
end
if [ "$ctcontainer_log_level" = debug ]
    logger 3 "set root.ctcontainer -> $ctcontainer_root"
    logger 3 "set share.ctcontainer -> $ctcontainer_share"
    logger 3 "set log_level.ctcontainer -> $ctcontainer_log_level"
    logger 3 "set backend.ctcontainer -> $ctcontainer_backend"
    logger 3 "set safety_level.ctcontainer -> $ctcontainer_safety_level"
    logger 3 "set auto_umount.ctcontainer -> $ctcontainer_auto_umount"
    logger 3 "set x11.ctcontainer -> $ctcontainer_x11"
    logger 3 "set source.ctcontainer -> $ctcontainer_source"
end
switch $argv[1]
    case service
        service $argv[2..-1]
    case purge
        purge $argv[2..-1]
    case init
        init $argv[2..-1]
    case import
        import $argv[2..-1]
    case run
        switch $ctcontainer_backend
            case chroot
                chroot_run $argv[2] $argv[3..-1]
            case nspawn
                nspawn_run $argv[2] $argv[3..-1]
        end
    case load
        set ctload true
        switch $ctcontainer_backend
            case chroot
                chroot_run $argv[2] $argv[3..-1]
            case nspawn
                nspawn_run $argv[2] $argv[3..-1]
        end
    case list
        list $argv[2..-1]
    case v version
        logger 1 "Hairpin@build4"
    case install
        install ctcontainer
    case uninstall
        uninstall ctcontainer
    case h help '*'
        help_echo
end
